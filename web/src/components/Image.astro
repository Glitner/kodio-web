---
import { urlFor } from '@lib/sanity';
import type { ImageObj } from '@lib/sanity';

export interface Props {
  image: ImageObj;
  class?: string;
  widths?: number[];
  sizes?: string;
  loading?: 'lazy' | 'eager';
  aspectRatio?: number | 'intrinsic';
  objectFit?: 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
}

const {
  image,
  widths = [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
  sizes = '100vw',
  loading = 'lazy',
  aspectRatio: aspectRatioProp = 'intrinsic',
  objectFit = 'contain',
} = Astro.props;

const urlBuilder = urlFor(image).auto('format').fit('clip');

const srcset = widths.map((width) => `${urlBuilder.width(width).url()} ${width}w`).join(', ');

const src = urlBuilder.url();

function getAspectRatioForImage(img: ImageObj) {
  const ref = img.asset?._ref;
  const dimensions = ref?.split('-')[2] ?? '';
  const [width, height] = dimensions?.split('x').map((d) => parseInt(d, 10));

  if (!width || !height) return 1;

  return width / height;
}

const aspectRatio =
  aspectRatioProp === 'intrinsic' ? getAspectRatioForImage(image) : aspectRatioProp;
---

<img
  alt={image.alt ?? ''}
  class={Astro.props.class}
  sizes={sizes}
  srcset={srcset}
  src={src}
  loading={loading}
/>

<style lang="scss" define:vars={{ aspectRatio, objectFit }}>
  img {
    width: 100%;
    object-fit: var(--objectFit);
    aspect-ratio: var(--aspectRatio);
  }
</style>
