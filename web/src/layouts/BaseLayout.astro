---
import '@fontsource/lora';
import Footer from 'components/Footer.astro';
import Header from 'components/Header.astro';
import Metadata from 'components/Metadata.astro';
import { getDefaultMetadata } from 'lib/sanity';
import type { PageMetadata } from 'types/sanity';

export interface Props {
  title?: string;
  slug: string;
  pageMetadata?: PageMetadata | undefined;
  headerColor: string;
}

const { title, slug, pageMetadata, headerColor } = Astro.props;

const defaultMetadata = await getDefaultMetadata();
---

<!DOCTYPE html>
<html lang="no">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/png" href="/kodio-web/favicon.png" />
    <Metadata
      title={title}
      slug={slug}
      description={pageMetadata?.description ?? defaultMetadata.description}
      image={pageMetadata?.image ?? defaultMetadata.image}
    />
  </head>
  <body>
    <Header color={headerColor} />
    <main>
      <slot />
    </main>
    <Footer />
    <style lang="scss">
      :root {
        --black: #131d22;
        --white: #fffffb;
        --kodio-yellow: #f7e06a;
        --kodio-dark: #112f3a;
        --kodio-purple: #d3afe9;
        --kodio-orange: #ef8354;
        --pale-yellow: #fffae8;
        --color-text: var(--black);
        --color-bg: var(--kodio-dark);
        --header-height: 144px;
        --focus-color: var(--kodio-orange);
        --content-max-width: 1400px;
        --content-padding: 2rem;
      }

      body {
        font-family: 'Lora', system-ui, sans-serif;
        font-size: 100%;
        color: var(--color-text);
        background-color: var(--color-bg);
      }
    </style>
    <style is:global>
      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }

      * {
        margin: 0;
        color: inherit;
      }

      *:focus-visible {
        outline: none;
      }

      body.tabbed *:focus-visible {
        outline: none;
        position: relative;
        border-radius: 4px;
      }

      body.tabbed *:focus-visible::before {
        content: '';
        position: absolute;
        inset: -6px;
        border: 2px solid var(--focus-color);
        border-radius: 5px;
      }

      html,
      body {
        height: 100%;
      }

      html {
        scroll-behavior: smooth;
        -webkit-text-size-adjust: 100%;
        text-size-adjust: 100%;
      }

      body {
        line-height: 1.5;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      a {
        display: inline-block;
      }

      img,
      picture,
      video,
      canvas {
        display: block;
        max-width: 100%;
      }

      input,
      button,
      textarea,
      select {
        font: inherit;
      }

      p,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        overflow-wrap: break-word;
      }

      ul,
      ol {
        padding: 0;
      }

      button {
        cursor: pointer;
      }

      @media (prefers-reduced-motion: reduce) {
        html {
          scroll-behavior: auto;
        }

        *,
        *::before,
        *::after {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
          scroll-behavior: auto !important;
        }
      }
    </style>
  </body>
</html>

<script>
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Tab') {
      document.body.classList.add('tabbed');
    }
  });

  document.addEventListener('mousedown', () => {
    document.body.classList.remove('tabbed');
  });
</script>
