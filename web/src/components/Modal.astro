---
export interface Props {
  id: string;
  label: string;
  openButtonId: string;
  closeButtonId: string;
}

const { id, label, openButtonId, closeButtonId } = Astro.props;
---

<dialog id={id} aria-label={label}>
  <slot>Modal content</slot>
</dialog>

<style lang="scss">
  dialog {
    position: fixed;
    display: block;
    inset: 0;
    border: none;
    max-width: unset;
    max-height: unset;
    width: 100vw;
    height: 100vh;
    padding: 0;
    background-color: var(--kodio-purple);
  }

  dialog,
  dialog[open]::backdrop {
    visibility: hidden;
    translate: 100%;
    transition: visibility 0s ease-in-out 0.3s, translate 0.3s ease-in-out;
  }

  dialog[open].in,
  dialog[open].in::backdrop {
    transition-delay: 0s;
    translate: none;
    visibility: visible;
  }
</style>

<script define:vars={{ openButtonId, closeButtonId, id }}>
  (function () {
    const modalElement = document.getElementById(id);
    const openModalButton = document.getElementById(openButtonId);
    const closeModalButton = document.getElementById(closeButtonId);

    openModalButton.addEventListener('click', function () {
      modalElement.showModal();
      modalElement.classList.add('in');
    });

    closeModalButton.addEventListener('click', function () {
      modalElement.classList.remove('in');
      modalElement.addEventListener(
        'transitionend',
        () => {
          modalElement.close();
        },
        { once: true }
      );
    });
  })();
</script>
